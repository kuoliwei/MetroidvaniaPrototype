//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Data/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""0acb02a0-f8f4-4b39-bf6f-a9f9eb11118d"",
            ""actions"": [
                {
                    ""name"": ""ApplyMovement"",
                    ""type"": ""Value"",
                    ""id"": ""4614d3e5-e8b2-4db8-b97b-f7d470ede9c5"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SetRunSpeen"",
                    ""type"": ""Button"",
                    ""id"": ""b4498d5d-555e-4ffe-adcc-a309a2360911"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ApplyJump"",
                    ""type"": ""Button"",
                    ""id"": ""a14c67d2-2ba1-42f8-a882-9c27cf421de7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FastFall"",
                    ""type"": ""Button"",
                    ""id"": ""aaf8eb42-7dd4-4058-ac1c-d127a8e44a15"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ApplyClimb"",
                    ""type"": ""Value"",
                    ""id"": ""766223b1-b351-4f43-8c9c-79575ceee8b8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""eef9165a-e727-4fc0-a169-295d12f4fe8c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ApplyMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""72cb458d-10bc-4a3f-930c-2e0e14611659"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ApplyMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""0aa4eb60-4efb-4f4d-a0e0-adb93413d56e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ApplyMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9ca13309-1a66-47e4-b25b-88d5d844a5e8"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SetRunSpeen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9c4fee08-86e4-46ae-aff9-cd9d051e47a6"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ApplyJump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""134f20ef-840e-4104-ac91-4fa52f949b89"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FastFall"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""6f00ce00-bd60-40e1-87ca-aa0aac15a777"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ApplyClimb"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e3b01e45-e30d-4a7a-8f4f-4822ba314e8b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ApplyClimb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""316dc587-0008-4372-854b-657cda8143a1"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ApplyClimb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7c005c87-147d-4757-93db-5a97d55183dd"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ApplyClimb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0c96f45a-45db-4452-b43a-fc8da9a6d6ae"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ApplyClimb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_ApplyMovement = m_Player.FindAction("ApplyMovement", throwIfNotFound: true);
        m_Player_SetRunSpeen = m_Player.FindAction("SetRunSpeen", throwIfNotFound: true);
        m_Player_ApplyJump = m_Player.FindAction("ApplyJump", throwIfNotFound: true);
        m_Player_FastFall = m_Player.FindAction("FastFall", throwIfNotFound: true);
        m_Player_ApplyClimb = m_Player.FindAction("ApplyClimb", throwIfNotFound: true);
    }

    ~@PlayerInputActions()
    {
        UnityEngine.Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, PlayerInputActions.Player.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_ApplyMovement;
    private readonly InputAction m_Player_SetRunSpeen;
    private readonly InputAction m_Player_ApplyJump;
    private readonly InputAction m_Player_FastFall;
    private readonly InputAction m_Player_ApplyClimb;
    public struct PlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ApplyMovement => m_Wrapper.m_Player_ApplyMovement;
        public InputAction @SetRunSpeen => m_Wrapper.m_Player_SetRunSpeen;
        public InputAction @ApplyJump => m_Wrapper.m_Player_ApplyJump;
        public InputAction @FastFall => m_Wrapper.m_Player_FastFall;
        public InputAction @ApplyClimb => m_Wrapper.m_Player_ApplyClimb;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @ApplyMovement.started += instance.OnApplyMovement;
            @ApplyMovement.performed += instance.OnApplyMovement;
            @ApplyMovement.canceled += instance.OnApplyMovement;
            @SetRunSpeen.started += instance.OnSetRunSpeen;
            @SetRunSpeen.performed += instance.OnSetRunSpeen;
            @SetRunSpeen.canceled += instance.OnSetRunSpeen;
            @ApplyJump.started += instance.OnApplyJump;
            @ApplyJump.performed += instance.OnApplyJump;
            @ApplyJump.canceled += instance.OnApplyJump;
            @FastFall.started += instance.OnFastFall;
            @FastFall.performed += instance.OnFastFall;
            @FastFall.canceled += instance.OnFastFall;
            @ApplyClimb.started += instance.OnApplyClimb;
            @ApplyClimb.performed += instance.OnApplyClimb;
            @ApplyClimb.canceled += instance.OnApplyClimb;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @ApplyMovement.started -= instance.OnApplyMovement;
            @ApplyMovement.performed -= instance.OnApplyMovement;
            @ApplyMovement.canceled -= instance.OnApplyMovement;
            @SetRunSpeen.started -= instance.OnSetRunSpeen;
            @SetRunSpeen.performed -= instance.OnSetRunSpeen;
            @SetRunSpeen.canceled -= instance.OnSetRunSpeen;
            @ApplyJump.started -= instance.OnApplyJump;
            @ApplyJump.performed -= instance.OnApplyJump;
            @ApplyJump.canceled -= instance.OnApplyJump;
            @FastFall.started -= instance.OnFastFall;
            @FastFall.performed -= instance.OnFastFall;
            @FastFall.canceled -= instance.OnFastFall;
            @ApplyClimb.started -= instance.OnApplyClimb;
            @ApplyClimb.performed -= instance.OnApplyClimb;
            @ApplyClimb.canceled -= instance.OnApplyClimb;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnApplyMovement(InputAction.CallbackContext context);
        void OnSetRunSpeen(InputAction.CallbackContext context);
        void OnApplyJump(InputAction.CallbackContext context);
        void OnFastFall(InputAction.CallbackContext context);
        void OnApplyClimb(InputAction.CallbackContext context);
    }
}
